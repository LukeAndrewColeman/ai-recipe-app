'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { useUser } from '@clerk/nextjs';

export default function RecipesPage() {
  const [recipe, setRecipe] = useState(null);
  const [recipeSaved, setRecipeSaved] = useState(false);
  const { user } = useUser();

  useEffect(() => {
    // Get the recipe from localStorage
    const stored = localStorage.getItem('recipePreviews');
    if (stored) {
      setRecipe(JSON.parse(stored));
    }
  }, []);

  const saveRecipe = async (recipeData) => {
    const response = await fetch('/api/recipe', {
      method: 'POST',
      body: JSON.stringify({ recipe: recipeData }),
    });
    const data = await response.json();
  };

  const handleSaveRecipe = (recipe) => {
    const recipeData = {
      name: recipe.recipe.name,
      description: recipe.recipe.description,
      difficulty: recipe.recipe.difficulty,
      cookingTime: recipe.recipe.cookingTime,
      servings: recipe.recipe.servings,
      ingredients: recipe.recipe.ingredients,
      instructions: recipe.recipe.instructions,
      tipsAndVariations: recipe.recipe.tipsAndVariations,
      whyYoullLoveIt: recipe.recipe.whyYoullLoveIt,
      storageInstructions: recipe.recipe.storageInstructions,
      finalThoughts: recipe.recipe.finalThoughts,
    };

    saveRecipe(recipeData);
    setRecipeSaved(true);
  };

  if (!recipe) {
    return (
      <div className='text-center mt-20'>
        No recipe found. Please generate a recipe first.
      </div>
    );
  }

  return (
    <>
      <article>
        <header className='bg-primary text-center py-32'>
          <div className='max-w-5xl mx-auto'>
            <h1 className='text-5xl font-bold px-4 py-8 rounded-lg uppercase'>
              {recipe.recipe.name}
            </h1>
            <div
              className='rich-text-content'
              dangerouslySetInnerHTML={{ __html: recipe.recipe.description }}
            />
          </div>
        </header>

        <div className='container mx-auto px-4 py-8'>
          {user && (
            <button
              onClick={() => handleSaveRecipe(recipe)}
              disabled={recipeSaved}
              className='btn bg-secondary border border-secondary/40 hover:border-secondary hover:bg-secondary/40 normal-case flex items-center justify-start gap-2 px-8 transition-all text-center mb-8'
            >
              {recipeSaved ? 'Recipe Saved' : 'Save Recipe'}
            </button>
          )}
          <section className='recipe-details flex flex-row gap-4 mb-8'>
            <p className='bg-primary/10 text-primary rounded-lg p-2'>
              {recipe.recipe.difficulty}
            </p>
            <p className='bg-primary/10 text-primary rounded-lg p-2'>
              {recipe.recipe.cookingTime}
            </p>
            <p className='bg-primary/10 text-primary rounded-lg p-2'>
              <span className=''>Servings</span> {recipe.recipe.servings}
            </p>
          </section>
          <h2 className='text-2xl font-bold mb-2'>Ingredients</h2>
          <ul className='list-disc list-inside'>
            {recipe.recipe.ingredients.map((ingredient) => (
              <li key={ingredient}>{ingredient}</li>
            ))}
          </ul>
          <h2 className='text-2xl font-bold mb-2 mt-6'>Instructions</h2>
          <ol className='list-decimal list-inside'>
            {recipe.recipe.instructions.map((instruction) => (
              <li key={instruction}>{instruction}</li>
            ))}
          </ol>
          <h2 className='text-2xl font-bold mb-2 mt-6'>Tips and Variations</h2>
          <ul className='list-disc list-inside'>
            {recipe.recipe.tipsAndVariations.map((tip) => (
              <li key={tip}>{tip}</li>
            ))}
          </ul>
          <h2 className='text-2xl font-bold mb-2 mt-6'>Why You'll Love It</h2>
          <p>{recipe.recipe.whyYoullLoveIt}</p>
          <h2 className='text-2xl font-bold mb-2 mt-6'>Storage Instructions</h2>
          <p>{recipe.recipe.storageInstructions}</p>
          <h2 className='text-2xl font-bold mb-2 mt-6'>Final Thoughts</h2>
          <p>{recipe.recipe.finalThoughts}</p>
          <p className='text-sm text-gray-500 mt-8 italic'>
            We cannot take responsibility for poorly cooked or unappetising
            recipes. These recipes are generated by AI and have therefore not
            been tested in the real world.
          </p>
        </div>
      </article>
      <div className='bg-primary py-12 mt-12 rounded-lg'>
        <div className='text-center'>
          <h2 className='text-2xl font-bold mb-4'>Generate another recipe</h2>
          <p className='text-base-content/70 mb-6 max-w-xl mx-auto'>
            Generate another recipe with our AI-powered recipe generator.
          </p>
          <Link
            href='/recipe-generator'
            className='btn bg-secondary hover:bg-secondary/40 border border-secondary'
          >
            Generate Another Recipe
          </Link>
        </div>
      </div>
    </>
  );
}
