generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password      String?    // Made optional for social login
  name          String?
  createdAt     DateTime   @default(now())
  favorites     Favorite[]
  recipes       Recipe[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Recipe {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  cuisine      String
  ingredients  String     @db.Text
  instructions String     @db.Text
  createdAt    DateTime   @default(now())
  userId       Int
  cookingTime  Int        @default(0)
  favorites    Favorite[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Recipe_userId_fkey")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([recipeId], map: "Favorite_recipeId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
