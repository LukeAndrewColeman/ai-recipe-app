'use client';

import { useEffect, useState, useRef } from 'react';
import { generateRecipePreviews } from '@/app/actions/generateRecipeIdeas';
import AIRecipeCard from './AIRecipeCard';
import LoadingRecipeCard from './LoadingRecipeCard';
import { motion } from 'motion/react';

export default function RecipeContent({ cuisine }) {
  const [recipePreviews, setRecipePreviews] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [generationStep, setGenerationStep] = useState('');
  const [selectedCuisine, setSelectedCuisine] = useState(cuisine);

  const fetchedRef = useRef({});

  async function fetchData() {
    setLoading(true);
    setError(null);
    setGenerationStep('Exploring cuisine...');

    try {
      fetchedRef.current[cuisine] = true;

      setGenerationStep(
        'Hang tight, Smart Recipe AI is generating recipe ideas for you...'
      );
      const previewData = await generateRecipePreviews(cuisine);

      if (!previewData?.recipes?.length) {
        throw new Error('No recipes generated');
      }

      setRecipePreviews(previewData);
      setGenerationStep('');
    } catch (e) {
      const errorMessage = e.message || 'Failed to generate recipes';
      setError(errorMessage);
      fetchedRef.current[cuisine] = false;
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    if (fetchedRef.current[cuisine]) {
      return;
    }

    setSelectedCuisine(cuisine);
    fetchData();
  }, [cuisine]);

  const handleRegenerate = () => {
    setRecipePreviews(null);
    setError(null);
    setLoading(true);
    fetchData();
  };

  const handleRetry = () => {
    fetchedRef.current[cuisine] = false;
    setRecipePreviews(null);
    setError(null);
    setLoading(true);
    fetchData();
  };

  return (
    <>
      <div className='mb-8'>
        <h2 className='text-2xl font-semibold mb-20'>AI Recipe Suggestions</h2>
        {loading ? (
          <>
            <div className='text-center mb-6 font-semibold text-lg'>
              {generationStep}
            </div>
            <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
              <LoadingRecipeCard />
              <LoadingRecipeCard />
              <LoadingRecipeCard />
            </div>
          </>
        ) : recipePreviews?.recipes ? (
          <>
            <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
              {recipePreviews.recipes.map((recipe, index) => (
                <AIRecipeCard
                  key={`${cuisine}-${index}`}
                  recipe={recipe}
                  cuisine={cuisine}
                />
              ))}
            </div>
          </>
        ) : error ? (
          <div className='p-4 bg-red-50 border border-red-200 rounded'>
            <p className='text-red-700 font-medium'>Error</p>
            <p className='text-red-600'>
              {error ||
                'Currently unable to generate recipes. Please try again later.'}
            </p>
            <button onClick={handleRetry} className='mt-2 btn btn-sm btn-error'>
              Try Again
            </button>
          </div>
        ) : null}
        <p className='text-neutral/60 text-sm mt-6 mb-10 mx-auto text-center'>
          We cannot take responsibility for poorly cooked or unappetising
          recipes. These recipes are generated by AI and have therefore not been
          tested in the real world.
        </p>
        <div className='flex justify-center'>
          <motion.div whileHover={{ scale: 1.05, rotate: 2, origin: 'center' }}>
            <button
              className='btn bg-secondary/20 border border-secondary/40 hover:border-secondary hover:bg-secondary/40 normal-case flex items-center justify-start gap-2 px-8 transition-all text-center'
              onClick={handleRegenerate}
            >
              Regenerate Recipes
            </button>
          </motion.div>
        </div>
      </div>
    </>
  );
}
