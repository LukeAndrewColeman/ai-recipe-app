'use client';

import { useEffect, useState, useRef } from 'react';
import { getRecipesByCuisine } from '@/app/actions/getRecipes';
import { generateRecipeIdeas } from '@/app/actions/generateRecipeIdeas';
import AIRecipeCard from './AIRecipeCard';
import RecipeList from './RecipeList';
import LoadingRecipeCard from './LoadingRecipeCard';
import AddCommunityRecipe from './AddCommunityRecipe';

export default function RecipeContent({ cuisine }) {
  const [recipes, setRecipes] = useState([]);
  const [aiSuggestions, setAiSuggestions] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [generationStep, setGenerationStep] = useState('');
  const [selectedCuisine, setSelectedCuisine] = useState(cuisine);

  // Use ref to track if we've already fetched data for this cuisine
  const fetchedRef = useRef({});

  async function fetchData() {
    setLoading(true);
    setError(null);
    setGenerationStep('Exploring cuisine...');

    try {
      // Mark this cuisine as fetched at the start
      fetchedRef.current[cuisine] = true;

      const recipesData = await getRecipesByCuisine(cuisine);
      setRecipes(recipesData);

      setGenerationStep(
        'Hang tight, CuisineQuest AI is generating recipe ideas for you...'
      );
      const aiData = await generateRecipeIdeas(cuisine);

      if (!aiData?.recipes?.length) {
        throw new Error('No recipes generated');
      }

      setAiSuggestions(aiData);
      setGenerationStep('');
    } catch (e) {
      const errorMessage = e.message || 'Failed to generate recipes';
      setError(errorMessage);
      fetchedRef.current[cuisine] = false;
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    // Check if we've already fetched for this cuisine
    if (fetchedRef.current[cuisine]) {
      return;
    }

    setSelectedCuisine(cuisine);

    fetchData();
  }, [cuisine]);

  const handleRegenerate = () => {
    setAiSuggestions(null);
    setError(null);
    setLoading(true);
    fetchData(selectedCuisine);
  };

  const handleRetry = () => {
    fetchedRef.current[cuisine] = false;
    setAiSuggestions(null);
    setError(null);
    setLoading(true);
    fetchData();
  };

  return (
    <>
      <div className='mb-8'>
        <h2 className='text-2xl font-semibold mb-10'>AI Recipe Suggestions</h2>
        {loading ? (
          <>
            <div className='text-center mb-6 font-semibold text-lg'>
              {generationStep}
            </div>
            <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
              <LoadingRecipeCard />
              <LoadingRecipeCard />
              <LoadingRecipeCard />
            </div>
          </>
        ) : aiSuggestions?.recipes ? (
          <>
            <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
              {aiSuggestions.recipes.map((recipe, index) => (
                <AIRecipeCard key={`${cuisine}-${index}`} recipe={recipe} />
              ))}
            </div>
          </>
        ) : error ? (
          <div className='p-4 bg-red-50 border border-red-200 rounded'>
            <p className='text-red-700 font-medium'>Error</p>
            <p className='text-red-600'>
              {error ||
                'Currently unable to generate recipes. Please try again later.'}
            </p>
            <button onClick={handleRetry} className='mt-2 btn btn-sm btn-error'>
              Try Again
            </button>
          </div>
        ) : null}
        <p className='text-center text-neutral/60 text-sm mt-6 mb-10'>
          We cannot take responsibility for poorly cooked or unappetising
          recipes. These recipes are generated by AI and have therefore not been
          tested in the real world. Please use common sense when cooking any of
          these recipes.
        </p>
        <div className='flex justify-center'>
          <button
            className='btn bg-secondary/20 border border-secondary/40 hover:border-secondary hover:bg-secondary/40 normal-case flex items-center justify-start gap-2 px-8 transition-all text-center'
            onClick={handleRegenerate}
          >
            Regenerate Recipes
          </button>
        </div>
      </div>

      <h2 className='text-2xl font-semibold mb-6'>
        Community Recipes Submitted by Users
      </h2>

      {recipes.length > 0 && (
        <div className='mb-8'>
          <RecipeList recipes={recipes} />
        </div>
      )}

      <AddCommunityRecipe
        cuisine={cuisine}
        onRecipeAdded={() => {
          // Refetch recipes when a new one is added
          fetchedRef.current[cuisine] = false;
          fetchData();
        }}
      />
    </>
  );
}
